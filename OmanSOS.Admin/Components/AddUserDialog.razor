@inject IUsersService usersService
@inject ISnackbar snackbar

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <MudDialog>
        <DialogContent>
            <DataAnnotationsValidator />
            @if (alert.IsVisible)
            {
                <MudAlert Severity="alert.AlertType">@(alert.Message)</MudAlert>
            }
            <MudTextField 
                T="int" 
                @bind-Value="@model.NationalId" 
                For="@(() => model.NationalId)" 
                Label="National ID" 
                Class="my-6" 
                Variant="Variant.Outlined" />
            <MudTextField 
                T="string" 
                @bind-Value="@model.Name" 
                For="@(() => model.Name)" 
                Label="Name" 
                Class="my-6" 
                Variant="Variant.Outlined" />
            <MudTextField 
                T="string" 
                @bind-Value="@model.Email" 
                For="@(() => model.Email)" 
                Label="Email" 
                Class="my-6" 
                Variant="Variant.Outlined" />
            <MudTextField 
                T="string" 
                @bind-Value="@model.Phone" 
                For="@(() => model.Phone)" 
                Label="Phone" 
                Class="my-6" 
                Variant="Variant.Outlined" />
            <MudSelect T="int" @bind-Value="model.UserTypeId" Label="User Type" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                <MudSelectItem T="int" Value="1">Regular User</MudSelectItem>
                <MudSelectItem T="int" Value="2">Administrator</MudSelectItem>
            </MudSelect>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Add</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    // Properties
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = new MudDialogInstance();
    private AddUserModel model = new();
    private AlertModel alert = new();

    // Lifecycle Methods

    // Private Methods
    void Cancel() => MudDialog.Cancel();

    private async Task OnValidSubmit()
    {
        try
        {
            var response = await usersService.Add(new UserViewModel
                {
                    NationalId = model.NationalId,
                    Name = model.Name,
                    Email = model.Email,
                    Phone = model.Phone,
                    UserTypeId = model.UserTypeId
                });

            if (response == null)
            {
                snackbar.Add("Response Unknown", Severity.Error);
                return;
            } 
            else if (response.StatusCode != HttpStatusCode.Created || response?.Data == null)
            {
                snackbar.Add(response?.Message, Severity.Error);
                return;
            }
            else
            {
                snackbar.Add(response.Message, Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error: {e.Message}");
            snackbar.Add($"Error: {e.Message}", Severity.Error);
            return;
        }
    }
}