@page "/users"
@layout MainLayout
@inject IUserService userService
@inject IDialogService dialogService
@inject IBrowserStorageService browserStorageService
@inject ISnackbar snackbar

<PageTitle>Oman SOS | Users</PageTitle>

<h3 class="mb-4">Users</h3>

<div class="d-flex justify-end my-2">
    <MudButton Variant="Variant.Filled" Size="Size.Small" StartIcon="@Icons.Material.Filled.PersonAdd" Color="Color.Primary" OnClick="OpenAddUserDialog">Add New User</MudButton>
</div>
<MudTable Items="@users" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@loading" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>ID</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Email</MudTh>
        <MudTh>Phone</MudTh>
        <MudTh>Role</MudTh>
        <MudTh>Delete</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="ID">@context.NationalId</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd DataLabel="Phone">@context.Phone</MudTd>
        <MudTd DataLabel="Role">@(context.UserTypeId == 1 ? "Regular" : "Admin")</MudTd>
        <MudTd DataLabel="Delete">
            @if (context.Id != loggedInUser.Id)
            {
                <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" Color="Color.Error" OnClick="() => OnDeleteUserClicked(context.Id)" />
            }
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    // Properties
    private IEnumerable<UserViewModel> users = new List<UserViewModel>();
    private UserViewModel loggedInUser = new();
    private bool loading = false;

    // Lifecycle Methods
    protected override async Task OnInitializedAsync()
    {
        users = await GetUsersAsync();
        var user = await browserStorageService.GetItem<UserViewModel>("user");

        if (user != null)
        {
            loggedInUser = user;
            StateHasChanged();
        }
    }

    // Private Methods
    private async Task<IEnumerable<UserViewModel>> GetUsersAsync()
    {
        loading = true;

        try
        {
            var response = await userService.GetAll();

            if (response != null && response.StatusCode != HttpStatusCode.NotFound && response.Data != null)
            {
                loading = false;
                return response.Data;
            }
            else
            {
                loading = false;
                return new List<UserViewModel>();
            }
        }
        catch(Exception e)
        {
            Console.WriteLine("UserPage.GetUsersAsync", e.Message);
            loading = false;
            return new List<UserViewModel>();
        }
    }

    private async void OnDeleteUserClicked(int userId)
    {
        bool? result = await dialogService.ShowMessageBox(
            "Warning", 
            "Are you sure to delete this user?", 
            yesText:"Delete!", cancelText:"Cancel");

        if (result == true && userId != loggedInUser.Id)
        {
            try
            {
                var response = await userService.Delete(userId);

                if (response != null && response.Data == true)
                {
                    snackbar.Add("User deleted successfully", Severity.Success);
                    users = await GetUsersAsync();
                    StateHasChanged();
                }
                else
                    snackbar.Add("Could not delete user", Severity.Error);
            }
            catch (Exception e)
            {
                Console.WriteLine($"UsersPage.OnDeleteUserClicked: {e.Message}");
                snackbar.Add("Could not delete user", Severity.Error);
            }
        }
    }

    private async void OpenAddUserDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, MaxWidth = MaxWidth.Medium };
        var dialog = dialogService.Show<AddUserDialog>("Add New User", options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            users = await GetUsersAsync();
            StateHasChanged();
        }
    }
}
