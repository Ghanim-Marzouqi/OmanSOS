@page "/cloths-donation"
@layout MainLayout
@inject IMetadataService metadataService
@inject IDonationsService donationsService
@inject ISnackbar snackbar
@inject NavigationManager navigationManager
@inject IBrowserStorageService browserStorage

<h3 class="mb-4">Cloths Donation</h3>

<EditForm Model="@model" OnValidSubmit="Submit">
    <DataAnnotationsValidator />
    @if (alert.IsVisible)
    {
        <MudAlert Severity="alert.AlertType">@(alert.Message)</MudAlert>
    }
    <MudAutocomplete 
        T="string" 
        @bind-Value="@model.Location"
        For="() => model.Location"
        Label="Location"
        Margin="Margin.Dense"
        SearchFunc="@SearchLocation"
        ResetValueOnEmptyText="true"
        Variant="Variant.Outlined"/>
    <MudTextField 
        T="string" 
        @bind-Value="@model.Remarks"
        For="() => model.Remarks"
        Label="Remarks"
        Margin="Margin.Dense"
        Class="my-6"
        Variant="Variant.Outlined"
        Lines="3"/>
    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" FullWidth="true" Class="my-3">
        Donate
    </MudButton>
    <MudButton Variant="Variant.Text" Color="Color.Primary" Size="Size.Large" FullWidth="true" OnClick="GoBack">
        Go Back
    </MudButton>
</EditForm>

@code 
{
    // Properties
    IEnumerable<LocationViewModel> locations = new List<LocationViewModel>();
    private UserViewModel user { get; set; }
    private ClothDonationModel model = new();
    AlertModel alert = new();
    bool isLoading;

    protected override async Task OnInitializedAsync()
    {
        var loggedInUser = await browserStorage.GetItem<UserViewModel>("user");

        if (loggedInUser != null)
        {
            user = loggedInUser;
        }

        await GetLocations();
    }

    // Private Methods
    private async Task GetLocations()
    {
        try
        {
            var response = await metadataService.GetLocations();

            if (response == null)
            {
                snackbar.Add("Cannot send request to get locations", Severity.Error);
                return;
            }
            else if (response.StatusCode != HttpStatusCode.OK || response.Data == null)
            {
                snackbar.Add(response.Message, Severity.Error);
                return;
            }
            else
            {
                locations = response.Data;
            }
        }
        catch(Exception)
        {
            snackbar.Add("An error occurred while getting locations", Severity.Error);
        }
    }

    private async Task<IEnumerable<string>> SearchLocation(string value)
    {
        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return await Task.Run(() => locations.Select(p => p.Name).ToList<string>());
        return await Task.Run(() => locations.Where(p => p.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase)).Select(p => p.Name).ToList<string>());
    }

    private async Task Submit()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            var donation = new DonationViewModel
            {
                UserId = user.Id,
                LocationId = locations.First(p => p.Name == model.Location).Id,
                Amount = 0,
                Remarks = model.Remarks,
                CreatedBy = user.Name
            };

            var response = await donationsService.Add(donation);

            if (response == null)
            {
                isLoading = false;
                alert.Message = "Cannot send request";
                alert.AlertType = MudBlazor.Severity.Error;
                alert.IsVisible = true;
                StateHasChanged();
                return;
            }
            else if (response.StatusCode != HttpStatusCode.Created || response?.Data == null)
            {
                isLoading = false;
                alert.Message = response.Message;
                alert.AlertType = MudBlazor.Severity.Error;
                alert.IsVisible = true;
                StateHasChanged();
                return;
            }
            else
            {
                isLoading = false;
                alert.Message = "Thank you for your donation";
                alert.AlertType = MudBlazor.Severity.Success;
                alert.IsVisible = true;
                StateHasChanged();
                new Timeout(() => navigationManager.NavigateTo("/donation-list"), 2000);
                return;
            }
        }
        catch (Exception)
        {
            isLoading = false;
            alert.Message = "An error occurred while send new donation";
            alert.AlertType = MudBlazor.Severity.Error;
            alert.IsVisible = true;
            StateHasChanged();
            return;
        }
    }

    private void GoBack()
    {
        navigationManager.NavigateTo("/donation-list");
    }
}