@page "/"
@layout AuthLayout
@inject IAuthService authService
@inject IBrowserStorageService browserStorageService
@inject NavigationManager navigationManager

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="d-flex flex-row justify-center mud-width-full">
        <img src="/images/logo.png" alt="Logo" width="250">
    </div>
     @if (alert.IsVisible)
    {
        <MudAlert Severity="alert.AlertType">@(alert.Message)</MudAlert>
    }
    <MudTextField 
        T="string" 
        @bind-Value="@model.Email" 
        For="@(() => model.Email)" 
        Label="Email"
        Margin="Margin.Dense"
        Class="my-6" 
        Variant="Variant.Outlined" />
    <MudTextField 
        T="string" 
        @bind-Value="@model.Password" 
        For="@(() => model.Password)" 
        Label="Password"
        InputType="@passwordInput" 
        Margin="Margin.Dense"
        Variant="Variant.Outlined" 
        Adornment="Adornment.End"
        AdornmentIcon="@passwordInputIcon" 
        OnAdornmentClick="TogglePasswordVisibility" />
    <MudCheckBox T="bool" @bind-Checked="@rememberMe" Label="Remember Me" Color="Color.Primary" Class="ml-n3" />
    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" FullWidth="true" Class="my-3">
        @if (isLoading)
        {
            <MudProgressCircular Color="Color.Tertiary" Size="Size.Small" Style="margin-left: 10px;" Indeterminate="true" />
        }
        else
        {
            @("Sign In")
        }
    </MudButton>
    <div Class="d-flex justify-space-between align-center">
        <MudLink Href="/forgot-password">Forgot password?</MudLink>
        <MudLink Href="/register">Sign Up</MudLink>
    </div>
</EditForm>

@code 
{
    // Properties
    LoginModel model = new();
    AlertModel alert = new();
    bool rememberMe;
    bool isLoading;
    bool passwordVisibility;
    InputType passwordInput = InputType.Password;
    string passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    // Lifecycle Methods
    protected override async Task OnInitializedAsync()
    {
        var rememberMeChecked = await browserStorageService.GetItem<bool>("rememberMe");
        var user = await browserStorageService.GetItem<UserViewModel>("user");

        if (rememberMeChecked && user != null)
        {
            model.Email = user.Email;
            model.Password = user.Password;
            rememberMe = true;
        }
    }

    // Private Methods
    private void TogglePasswordVisibility()
    {
        if (passwordVisibility)
        {
            passwordVisibility = false;
            passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            passwordInput = InputType.Password;
        }
        else
        {
            passwordVisibility = true;
            passwordInputIcon = Icons.Material.Filled.Visibility;
            passwordInput = InputType.Text;
        }
    }

    private async Task OnValidSubmit()
    {
        try
        {
            var response = await authService.Login(model.Email, model.Password);

            if (response == null)
            {
                isLoading = false;
                alert.AlertType = Severity.Error;
                alert.Message = "Cannot send login request";
                alert.IsVisible = true;
                StateHasChanged();
                return;
            }
            else if (response.StatusCode != HttpStatusCode.OK || response.Data == null)
            {
                isLoading = false;
                alert.AlertType = Severity.Error;
                alert.Message = response.Message;
                alert.IsVisible = true;
                StateHasChanged();
                return;
            }
            else
            {
                // Store logged in user
                var user = response.Data;
                user.Password = model.Password;
                await browserStorageService.SetItem("user", user);

                // Store user if is remember is true
                if (rememberMe)
                {
                    await browserStorageService.SetItem("rememberMe", rememberMe);
                }
                else
                {
                    await browserStorageService.RemoveItem("rememberMe");
                }


                isLoading = false;
                alert.AlertType = Severity.Success;
                alert.Message = response.Message;
                alert.IsVisible = true;
                StateHasChanged();
                new Timeout(() => navigationManager.NavigateTo("/home"), 2000);
                return;
            }
        }
        catch (Exception e)
        {
            isLoading = false;
            alert.AlertType = Severity.Error;
            // alert.Message = "An error occurred while logging in";
            alert.Message = e.Message;
            alert.IsVisible = true;
            StateHasChanged();
            return;
        }
    }
}
